//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyUnusedCatchParameter
import org.apache.commons.io.IOUtils

import java.util.stream.Collectors

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }
        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }
        google()
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
        classpath "com.google.code.gson:gson:2.8.+"
        classpath "io.freefair.gradle:lombok-plugin:4.1.6"
    }
}

plugins {
    id "groovy"
    id 'java'
    id 'java-library'
    id "idea"
}

apply plugin: "io.freefair.lombok"

//apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// Read build number file.
int buildVersion = Integer.parseInt("${version1}")
int release = Integer.parseInt(project.property("versionRelease").toString())
String stage = project.property("versionStage").toString()
int stageRelease = Integer.parseInt(project.property("versionStageRelease").toString())

Integer buildNumber
try {
    FileInputStream fileInputStream = new FileInputStream("${projectDir}/buildnumber.txt")
    String buildNrString = new String(IOUtils.toByteArray(fileInputStream))
    fileInputStream.close()
    try {
        buildNumber = Integer.valueOf(buildNrString)
    } catch (NumberFormatException e) {
        buildNumber = -1
    }
} catch (IOException e) {
    buildNumber = -1
}


// Advance build number.
buildNumber++
println("Executing build " + buildNumber)
String newBuild = buildNumber.toString()

// Write new build number.
if (!new File("buildnumber.txt").exists()) {
    new File("buildnumber.txt").createNewFile()
}
FileOutputStream output = new FileOutputStream("${projectDir}/buildnumber.txt")
output.write(newBuild.getBytes())
output.flush()
output.close()

version = buildVersion + "." + release + '.' + buildNumber + "-" + stage + stageRelease
group = 'com.ultreon' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'commons'
//jar.version = version
jar.archiveVersion.set(version)

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

//GroovyShell shell = new GroovyShell(this.getClass().getClassLoader(), this.binding);
//shell.run(file, arguments);

println("Current version: " + version)
println("Project: " + group + ":" + archivesBaseName)
println("Bulding a Java " + compileJava.targetCompatibility + " project...")

repositories {
    mavenCentral()
    mavenLocal()
    google()
    maven { url "https://maven.atlassian.com/3rdparty/" }
    maven { url "https://maven.imagej.net/content/repositories/public/" }
    fileTree "${rootProject.projectDir}/lib/"
}

java {
    withSourcesJar()
    withJavadocJar()
}

task deleteOldJavadoc(type: Delete) {
    delete fileTree("$projectDir/docs/latest/")
}

task copyJavadoc(type: Copy) {
    from javadoc.outputs
    into "$projectDir/docs/latest/"
    dependsOn deleteOldJavadoc
}

mkdir "$projectDir/docs/"
mkdir "$projectDir/docs/latest"

javadoc.finalizedBy(copyJavadoc)

configurations {
    // configuration that holds jars to include in the jar
    api {
        canBeResolved true
    }
}

dependencies {
    // Jetbrains Annotations
    implementation 'org.jetbrains:annotations:22.0.0'

    // SwingX
    api 'org.swinglabs.swingx:swingx-common:1.6.5-1'
    api 'org.swinglabs.swingx:swingx-graphics:1.6.5-1'
    api 'org.swinglabs.swingx:swingx-core:1.6.5-1'
    api 'org.swinglabs.swingx:swingx-project:1.6.5-1'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // JUnit Jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    api 'com.google.code.gson:gson:2.8.8'

    // Others
    api 'com.github.oshi:oshi-core:5.8.2'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'QBubbles',
                'Implementation-Vendor': 'Ultreon Team',
                'Implementation-Version': "1.0-indev1",
                'Main-Class': 'com.qtech.preloadr.PreLoader'
    }
    from {
        configurations.named("api").get().getAllArtifacts().stream().map({ it.file }).collect(Collectors.toList())
//        configurations.extraLibs.collect {
//            it = it as Configuration
//            return it.getAllArtifacts().stream().map({ it.file }).collect(Collectors.toList())
////            it.isDirectory() ? it : zipTree(it)
//        }
    }
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}
test {
    useJUnitPlatform()
}

task("uploadJars", dependsOn: "build") {

    description = "uploads JARs"

    if (project.hasProperty("local_maven") || project.hasProperty("sftp_maven")) {
//        apply plugin: 'maven'
//        uploadArchives {
//            repositories {
//                if (project.hasProperty("local_maven")) {
//                    mavenDeployer {
//                        repository(url: "file://${local_maven}")
//                    }
//                }
//                if (project.hasProperty("sftp_maven")) {
//                    repositories.mavenDeployer {
//                        configuration = configurations.deployerJars
//                        repository(url: "sftp://${sftp_maven}") {
//                            authentication(userName: "${sftp_username}", privateKey: "${sftp_key}")
//                        }
//                    }
//                }
//            }
//        }
    }
}
